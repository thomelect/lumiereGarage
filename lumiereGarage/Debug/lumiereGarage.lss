
lumiereGarage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000002dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb4  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a39  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058e  00000000  00000000  00001981  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008744  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  0000a6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000a73a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003493  00000000  00000000  0000a772  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	47 c0       	rjmp	.+142    	; 0xe4 <__vector_21>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 e6       	ldi	r30, 0x68	; 104
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 30       	cpi	r26, 0x00	; 0
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a8 30       	cpi	r26, 0x08	; 8
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	8c d0       	rcall	.+280    	; 0x1f8 <main>
  e0:	c1 c0       	rjmp	.+386    	; 0x264 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <__vector_21>:

/**
*@brief Interruption qui génère les intervales de temps pour fade le DEL et compter le délai avant que la relai ne soit plus actif.
*/
ISR(TIMER0_COMPA_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
	toggleCnt++;
  f4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <toggleCnt>
  f8:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <toggleCnt+0x1>
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <toggleCnt+0x1>
 102:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <toggleCnt>
	if (toggleCnt == 15000) //15'000 = 1min 62.5ns * 256 * 250 * 15'000 = 60s.
 106:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <toggleCnt>
 10a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <toggleCnt+0x1>
 10e:	88 39       	cpi	r24, 0x98	; 152
 110:	9a 43       	sbci	r25, 0x3A	; 58
 112:	91 f4       	brne	.+36     	; 0x138 <__vector_21+0x54>
	{
		toggleCnt = 0; //compteur est remis à zéro à chaques minutes.
 114:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <toggleCnt+0x1>
 118:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <toggleCnt>
		toggleCntMin++;
 11c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <toggleCntMin>
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <toggleCntMin>
		if (toggleCntMin == 15) //délai est réglé À 15min.
 126:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <toggleCntMin>
 12a:	8f 30       	cpi	r24, 0x0F	; 15
 12c:	29 f4       	brne	.+10     	; 0x138 <__vector_21+0x54>
		{
			toggleCntMin = 0; //compteur remis à zéro à chaque 5minutes.
 12e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <toggleCntMin>
			toggleFlag = 1;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <toggleFlag>
		}
	}
	ledCnt++;
 138:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ledCnt>
 13c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ledCnt+0x1>
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <ledCnt+0x1>
 146:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ledCnt>
	if (ledCnt == 5) //chaques 20ms la DEL augmente ou diminue d'intensité en faisant des bons de 4 pour un maximum de 200 (((0.020 * 200) / 4) = 1sec).
 14a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ledCnt>
 14e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ledCnt+0x1>
 152:	05 97       	sbiw	r24, 0x05	; 5
 154:	39 f4       	brne	.+14     	; 0x164 <__vector_21+0x80>
	{
		ledCnt = 0;
 156:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ledCnt+0x1>
 15a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ledCnt>
		ledFlag = 1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	}
}
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <timer0Init>:
void timer0Init(void)
{
	//TCCR0A : COM0A1 COM0A0 COM0B1 COM0B0 – – WGM01 WGM00
	//TCCR0B : FOC0A FOC0B – – WGM02 CS02 CS01 CS00
	//TIMSK0 : – – – – – OCIE0B OCIE0A TOIE0
	TCCR0A |= (1<<WGM01);
 174:	84 b5       	in	r24, 0x24	; 36
 176:	82 60       	ori	r24, 0x02	; 2
 178:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02);
 17a:	85 b5       	in	r24, 0x25	; 37
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A);
 180:	ee e6       	ldi	r30, 0x6E	; 110
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	82 60       	ori	r24, 0x02	; 2
 188:	80 83       	st	Z, r24
	OCR0A = 249;
 18a:	89 ef       	ldi	r24, 0xF9	; 249
 18c:	87 bd       	out	0x27, r24	; 39
	sei();
 18e:	78 94       	sei
 190:	08 95       	ret

00000192 <timer4Init>:
	//TCCR4A: COM4A1 COM4A0 COM4B1 COM4B0 FOC4A FOC4B PWM4A PWM4B
	//TCCR4B: PWM4X PSR4 DTPS41 DTPS40 CS43 CS42 CS41 CS40
	//TCCR4C: COM4A1S COM4A0S COM4B1S COMAB0S COM4D1 COM4D0 FOC4D PWM4D
	//TCCR4D: FPIE4 FPEN4 FPNC4 FPES4 FPAC4 FPF4 WGM41 WGM40
	//TCCR4E: TLOCK4 ENHC4 OC4OE5 OC4OE4 OC4OE3 OC4OE2 OC4OE1 OC4OE0
	TCCR4A |= (1<<COM4A1) | (1<<PWM4A);
 192:	e0 ec       	ldi	r30, 0xC0	; 192
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	82 68       	ori	r24, 0x82	; 130
 19a:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40) | (1<<CS43);
 19c:	e1 ec       	ldi	r30, 0xC1	; 193
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	89 60       	ori	r24, 0x09	; 9
 1a4:	80 83       	st	Z, r24
	OCR4C = 200;
 1a6:	88 ec       	ldi	r24, 0xC8	; 200
 1a8:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__DATA_REGION_ORIGIN__+0x71>
	OCR4A = 0;
 1ac:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
 1b0:	08 95       	ret

000001b2 <miscInit>:
}

void miscInit(void)
{
	//Initialisation des E/S
	LED_INIT();
 1b2:	3f 9a       	sbi	0x07, 7	; 7
	RELAY_INIT();
 1b4:	21 9a       	sbi	0x04, 1	; 4
	SWITCH_DOOR_INIT();
 1b6:	2b 9a       	sbi	0x05, 3	; 5
	
	//Initialisation des Timers.
	timer0Init();
 1b8:	dd df       	rcall	.-70     	; 0x174 <timer0Init>
	timer4Init();
 1ba:	eb cf       	rjmp	.-42     	; 0x192 <timer4Init>
 1bc:	08 95       	ret

000001be <sleepModeON>:
 1be:	83 b7       	in	r24, 0x33	; 51
void sleepModeON(void)
{
	//SMCR: – – – – SM2 SM1 SM0 SE
	//PRR0: PRTWI – PRTIM0 – PRTIM1 PRSPI – PRADC
	//PRR1: PRUSB – – PRTIM4 PRTIM3 – – PRUSART1
	SMCR |= (1<<SM1) | (1<<SE); //SM1 (Sleep Mode #1) fait référence au mode Power-down. Le mode Power-Down est choisi et le bit Sleep Enable est mis à 1.
 1c0:	85 60       	ori	r24, 0x05	; 5
 1c2:	83 bf       	out	0x33, r24	; 51
	PRR0 |= (1<<PRTWI)/* | (1<<PRTIM0)*/ | (1<<PRTIM1) | (1<<PRSPI) | (1<<PRADC); //TWI, Timer/Counter0, Timer/Counter1, SPI and ADC sont désactivés pour réduire la consomation pendant la veille.
 1c4:	e4 e6       	ldi	r30, 0x64	; 100
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	8d 68       	ori	r24, 0x8D	; 141
 1cc:	80 83       	st	Z, r24
	PRR1 |= (1<<PRUSB) | (1<<PRTIM4) | (1<<PRTIM3) | (1<<PRUSART1); //USB clock, Timer/Counter4, Timer/Counter3 and USART1 sont désactivés pour réduire la consomation pendant la veille.
 1ce:	e5 e6       	ldi	r30, 0x65	; 101
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	89 69       	ori	r24, 0x99	; 153
 1d6:	80 83       	st	Z, r24
	PCICR |= 1; //Active l'interruption externe de type "Pin Change Interrupt". Tout changement sur une des broches PCINT0 à PCINT7 provoquera une interruption.
 1d8:	e8 e6       	ldi	r30, 0x68	; 104
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT3); //Active l'interruption PCINT0 si PCINT3 change d'état.
 1e2:	eb e6       	ldi	r30, 0x6B	; 107
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	88 60       	ori	r24, 0x08	; 8
 1ea:	80 83       	st	Z, r24
	sei(); //sei doit être présent afin de pouvoir se sortir du monde veille en utilisant une interruption.
 1ec:	78 94       	sei
	sleep_cpu(); //Passage en mode veille.
 1ee:	88 95       	sleep
	SMCR &= ~(1<<SE); //Au réveil le bit SE doit être remis à 0.
 1f0:	83 b7       	in	r24, 0x33	; 51
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	83 bf       	out	0x33, r24	; 51
 1f6:	08 95       	ret

000001f8 <main>:
*/
void timer4Init(void);

int main(void)
{
	miscInit();
 1f8:	dc df       	rcall	.-72     	; 0x1b2 <miscInit>
			ledFlag = 0;
			if (!SWITCH_DOOR() && (OCR4A < 200)) //Lorsque la porte est ouverte et que la DEL n'est pas à son intensité maximale (200) son intensité augmente.
			{
				OCR4A += PLUS_MOINS; //Augmente l'intensité de la DEL.
			}
			if (SWITCH_DOOR() && (OCR4A > 0)) //Lorsque la porte est fermée et que la DEL n'est pas à son intensité minimale (0) son intensité diminue.
 1fa:	cf ec       	ldi	r28, 0xCF	; 207
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}
		if (!SWITCH_DOOR()) //Si la porte est ouverte,
		{
			RELAY_ON(); //Le relai est activé.
			porteToggle = 1; //Permet de savoir si la porte à déjà été ouverte depuis le démarage afin de ne pas tomber inutilement en mode veille.
 1fe:	11 e0       	ldi	r17, 0x01	; 1
int main(void)
{
	miscInit();
	while (1)
	{
		if (ledFlag) //Si le flag est vrai...
 200:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 204:	88 23       	and	r24, r24
 206:	91 f0       	breq	.+36     	; 0x22c <main+0x34>
		{
			ledFlag = 0;
 208:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
			if (!SWITCH_DOOR() && (OCR4A < 200)) //Lorsque la porte est ouverte et que la DEL n'est pas à son intensité maximale (200) son intensité augmente.
 20c:	1b 99       	sbic	0x03, 3	; 3
 20e:	06 c0       	rjmp	.+12     	; 0x21c <main+0x24>
 210:	88 81       	ld	r24, Y
 212:	88 3c       	cpi	r24, 0xC8	; 200
 214:	18 f4       	brcc	.+6      	; 0x21c <main+0x24>
			{
				OCR4A += PLUS_MOINS; //Augmente l'intensité de la DEL.
 216:	88 81       	ld	r24, Y
 218:	8c 5f       	subi	r24, 0xFC	; 252
 21a:	88 83       	st	Y, r24
			}
			if (SWITCH_DOOR() && (OCR4A > 0)) //Lorsque la porte est fermée et que la DEL n'est pas à son intensité minimale (0) son intensité diminue.
 21c:	1b 9b       	sbis	0x03, 3	; 3
 21e:	06 c0       	rjmp	.+12     	; 0x22c <main+0x34>
 220:	88 81       	ld	r24, Y
 222:	88 23       	and	r24, r24
 224:	19 f0       	breq	.+6      	; 0x22c <main+0x34>
			{
				OCR4A -= PLUS_MOINS; //Diminue l'intensité de la DEL.
 226:	88 81       	ld	r24, Y
 228:	84 50       	subi	r24, 0x04	; 4
 22a:	88 83       	st	Y, r24
			}
		}
		if (!SWITCH_DOOR()) //Si la porte est ouverte,
 22c:	1b 99       	sbic	0x03, 3	; 3
 22e:	09 c0       	rjmp	.+18     	; 0x242 <main+0x4a>
		{
			RELAY_ON(); //Le relai est activé.
 230:	29 9a       	sbi	0x05, 1	; 5
			porteToggle = 1; //Permet de savoir si la porte à déjà été ouverte depuis le démarage afin de ne pas tomber inutilement en mode veille.
 232:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <porteToggle>
			toggleCnt = 0; //Remet le compteur à 0.
 236:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <toggleCnt+0x1>
 23a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <toggleCnt>
			toggleCntMin = 0; //Remet le compteur des minutes à 0 chaques fois que la porte est ouverte.
 23e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <toggleCntMin>
		}
		
		if (SWITCH_DOOR()) //Si la porte est fermée,
 242:	1b 9b       	sbis	0x03, 3	; 3
 244:	dd cf       	rjmp	.-70     	; 0x200 <main+0x8>
		{
			if (toggleFlag) //Si le délai est écoulé,
 246:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <toggleFlag>
 24a:	88 23       	and	r24, r24
 24c:	c9 f2       	breq	.-78     	; 0x200 <main+0x8>
			{
				toggleFlag = 0;
 24e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <toggleFlag>
				RELAY_OFF(); //Le relai n'est pas activé.
 252:	29 98       	cbi	0x05, 1	; 5
				if (porteToggle) //Si la porte à déjà été ouverte,
 254:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <porteToggle>
 258:	88 23       	and	r24, r24
 25a:	91 f2       	breq	.-92     	; 0x200 <main+0x8>
				{
					porteToggle = 0; //État de la porte == fermée
 25c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <porteToggle>
					sleepModeON(); //Mode veille.
 260:	ae df       	rcall	.-164    	; 0x1be <sleepModeON>
 262:	ce cf       	rjmp	.-100    	; 0x200 <main+0x8>

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
