
lumiereGarage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000002fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb4  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a39  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ba  00000000  00000000  000019a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001f60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000087a4  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  0000a794  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000a7ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000349f  00000000  00000000  0000a822  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	47 c0       	rjmp	.+142    	; 0xe4 <__vector_21>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea e8       	ldi	r30, 0x8A	; 138
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 30       	cpi	r26, 0x00	; 0
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a8 30       	cpi	r26, 0x08	; 8
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	95 d0       	rcall	.+298    	; 0x20a <main>
  e0:	d2 c0       	rjmp	.+420    	; 0x286 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <__vector_21>:

/**
*@brief Interruption qui génère les intervales de temps pour fade le DEL et compter le délai avant que la relai ne soit plus actif.
*/
ISR(TIMER0_COMPA_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
	//if (porteToggle) //Si la porte à été ouverte et que toggleCntSec qui à été remis à 0 à la fermeture de la porte n'a pas atteint _TIMER_MIN_CYCLE_CNT... **(Ce if empêche le compteur de tourner inutilement)**
	toggleCntSec++;
  f4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <toggleCntSec>
  f8:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <toggleCntSec+0x1>
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <toggleCntSec+0x1>
 102:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <toggleCntSec>
	if (toggleCntSec >= _TIMER_SEC_CYCLE_CNT) //15'000 = 1min 62.5ns * 256 * 250 * 15'000 = 60s.
 106:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <toggleCntSec>
 10a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <toggleCntSec+0x1>
 10e:	8c 34       	cpi	r24, 0x4C	; 76
 110:	9d 41       	sbci	r25, 0x1D	; 29
 112:	d8 f0       	brcs	.+54     	; 0x14a <__vector_21+0x66>
	{
		toggleCntSec -= _TIMER_SEC_CYCLE_CNT; //Compteur est remis à zéro à chaques minutes.
 114:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <toggleCntSec>
 118:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <toggleCntSec+0x1>
 11c:	8c 54       	subi	r24, 0x4C	; 76
 11e:	9d 41       	sbci	r25, 0x1D	; 29
 120:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <toggleCntSec+0x1>
 124:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <toggleCntSec>
		toggleCntMin++;
 128:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <toggleCntMin>
 12c:	8f 5f       	subi	r24, 0xFF	; 255
 12e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <toggleCntMin>
		if (toggleCntMin >= _TIMER_MIN_CYCLE_CNT) //Délai est réglé À 15min.
 132:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <toggleCntMin>
 136:	88 23       	and	r24, r24
 138:	41 f0       	breq	.+16     	; 0x14a <__vector_21+0x66>
		{
			toggleCntMin -= _TIMER_MIN_CYCLE_CNT; //Compteur remis à zéro à chaque 5minutes.
 13a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <toggleCntMin>
 13e:	81 50       	subi	r24, 0x01	; 1
 140:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <toggleCntMin>
			toggleFlag = 1;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <toggleFlag>
		}
	}
	
	ledCnt++;
 14a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ledCnt>
 14e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ledCnt+0x1>
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <ledCnt+0x1>
 158:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ledCnt>
	if (ledCnt == 5) //Chaques 20ms la DEL augmente ou diminue d'intensité en faisant des bons de 4 pour un maximum de 200 (((0.020 * 200) / 4) = 1sec).
 15c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ledCnt>
 160:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ledCnt+0x1>
 164:	05 97       	sbiw	r24, 0x05	; 5
 166:	39 f4       	brne	.+14     	; 0x176 <__vector_21+0x92>
	{
		ledCnt = 0;
 168:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ledCnt+0x1>
 16c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ledCnt>
		ledFlag = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	}
}
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <timer0Init>:
{
	//TCCR0A : COM0A1 COM0A0 COM0B1 COM0B0 – – WGM01 WGM00
	//TCCR0B : FOC0A FOC0B – – WGM02 CS02 CS01 CS00
	//TIMSK0 : – – – – – OCIE0B OCIE0A TOIE0
	
	TCCR0A |= (1<<WGM01);
 186:	84 b5       	in	r24, 0x24	; 36
 188:	82 60       	ori	r24, 0x02	; 2
 18a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02);
 18c:	85 b5       	in	r24, 0x25	; 37
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A);
 192:	ee e6       	ldi	r30, 0x6E	; 110
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	80 83       	st	Z, r24
	OCR0A = 250-1;
 19c:	89 ef       	ldi	r24, 0xF9	; 249
 19e:	87 bd       	out	0x27, r24	; 39
	sei();
 1a0:	78 94       	sei
 1a2:	08 95       	ret

000001a4 <timer4Init>:
	//TCCR4B: PWM4X PSR4 DTPS41 DTPS40 CS43 CS42 CS41 CS40
	//TCCR4C: COM4A1S COM4A0S COM4B1S COMAB0S COM4D1 COM4D0 FOC4D PWM4D
	//TCCR4D: FPIE4 FPEN4 FPNC4 FPES4 FPAC4 FPF4 WGM41 WGM40
	//TCCR4E: TLOCK4 ENHC4 OC4OE5 OC4OE4 OC4OE3 OC4OE2 OC4OE1 OC4OE0
	
	TCCR4A |= (1<<COM4A1) | (1<<PWM4A);
 1a4:	e0 ec       	ldi	r30, 0xC0	; 192
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	82 68       	ori	r24, 0x82	; 130
 1ac:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40) | (1<<CS43);
 1ae:	e1 ec       	ldi	r30, 0xC1	; 193
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	89 60       	ori	r24, 0x09	; 9
 1b6:	80 83       	st	Z, r24
	OCR4C = 200-1;
 1b8:	87 ec       	ldi	r24, 0xC7	; 199
 1ba:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__DATA_REGION_ORIGIN__+0x71>
	OCR4A = 0;
 1be:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
 1c2:	08 95       	ret

000001c4 <miscInit>:
}

void miscInit(void)
{
	//Initialisation des E/S
	DEL_INIT();
 1c4:	3f 9a       	sbi	0x07, 7	; 7
	RELAY_INIT();
 1c6:	21 9a       	sbi	0x04, 1	; 4
	CAPTEUR_PORTE_INIT();
 1c8:	2b 9a       	sbi	0x05, 3	; 5
	
	//Initialisation des Timers.
	timer0Init();
 1ca:	dd df       	rcall	.-70     	; 0x186 <timer0Init>
	timer4Init();
 1cc:	eb cf       	rjmp	.-42     	; 0x1a4 <timer4Init>
 1ce:	08 95       	ret

000001d0 <sleepModeON>:
 1d0:	83 b7       	in	r24, 0x33	; 51
{
	//SMCR: – – – – SM2 SM1 SM0 SE
	//PRR0: PRTWI – PRTIM0 – PRTIM1 PRSPI – PRADC
	//PRR1: PRUSB – – PRTIM4 PRTIM3 – – PRUSART1
	
	SMCR |= (1<<SM1) | (1<<SE); //SM1 (Sleep Mode #1) fait référence au mode Power-down. Le mode Power-Down est choisi et le bit Sleep Enable est mis à 1.
 1d2:	85 60       	ori	r24, 0x05	; 5
 1d4:	83 bf       	out	0x33, r24	; 51
	PRR0 |= (1<<PRTWI)/* | (1<<PRTIM0)*/ | (1<<PRTIM1) | (1<<PRSPI) | (1<<PRADC); //TWI, Timer/Counter0, Timer/Counter1, SPI and ADC sont désactivés pour réduire la consomation pendant la veille.
 1d6:	e4 e6       	ldi	r30, 0x64	; 100
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	8d 68       	ori	r24, 0x8D	; 141
 1de:	80 83       	st	Z, r24
	PRR1 |= (1<<PRUSB) | (1<<PRTIM4) | (1<<PRTIM3) | (1<<PRUSART1); //USB clock, Timer/Counter4, Timer/Counter3 and USART1 sont désactivés pour réduire la consomation pendant la veille.
 1e0:	e5 e6       	ldi	r30, 0x65	; 101
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	89 69       	ori	r24, 0x99	; 153
 1e8:	80 83       	st	Z, r24
	PCICR |= 1; //Active l'interruption externe de type "Pin Change Interrupt". Tout changement sur une des broches PCINT0 à PCINT7 provoquera une interruption.
 1ea:	e8 e6       	ldi	r30, 0x68	; 104
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT0) | (1<<PCINT3); //Active l'interruption PCINT0 (PB0) et PCINT3 (PB3) change d'état afin de sortir du mode veille.
 1f4:	eb e6       	ldi	r30, 0x6B	; 107
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	89 60       	ori	r24, 0x09	; 9
 1fc:	80 83       	st	Z, r24
	sei(); //sei doit être présent afin de pouvoir se sortir du monde veille en utilisant une interruption.
 1fe:	78 94       	sei
	sleep_cpu(); //Passage en mode veille.
 200:	88 95       	sleep
	SMCR &= ~(1<<SE); //Au réveil le bit SE doit être remis à 0.
 202:	83 b7       	in	r24, 0x33	; 51
 204:	8e 7f       	andi	r24, 0xFE	; 254
 206:	83 bf       	out	0x33, r24	; 51
 208:	08 95       	ret

0000020a <main>:
*/
void timer4Init(void);

int main(void)
{
	miscInit();
 20a:	dc df       	rcall	.-72     	; 0x1c4 <miscInit>
			ledFlag = 0;
			if ((!CAPTEUR_PORTE() || CAPTEUR_MOVE()) && (OCR4A < 200)) //Si la porte est ouverte ou qu'un mouvement est détecté et que la DEL n'est pas à son intensité maximale (200)...
			{
				OCR4A += PLUS_MOINS; //Augmente l'intensité de la DEL.
			}
			if ((CAPTEUR_PORTE() && !CAPTEUR_MOVE()) && (OCR4A > 0)) //Si la porte est fermée et qu'aucun mouvement n'est détecté et que la DEL n'est pas à son intensité minimale (0)...
 20c:	cf ec       	ldi	r28, 0xCF	; 207
 20e:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}
		if ((!CAPTEUR_PORTE() || CAPTEUR_MOVE())) //Si la porte est ouverte ou qu'un mouvement est détecté...
		{
			RELAY_SET(1); //Le relai est activé.
			porteToggle = 1; //Permet de savoir si la porte à déjà été ouverte depuis le démarage afin de ne pas tomber inutilement en mode veille.
 210:	11 e0       	ldi	r17, 0x01	; 1
int main(void)
{
	miscInit();
	while (1)
	{
		if (ledFlag) //Si le flag est vrai...
 212:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 216:	88 23       	and	r24, r24
 218:	b1 f0       	breq	.+44     	; 0x246 <main+0x3c>
		{
			ledFlag = 0;
 21a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
			if ((!CAPTEUR_PORTE() || CAPTEUR_MOVE()) && (OCR4A < 200)) //Si la porte est ouverte ou qu'un mouvement est détecté et que la DEL n'est pas à son intensité maximale (200)...
 21e:	1b 9b       	sbis	0x03, 3	; 3
 220:	02 c0       	rjmp	.+4      	; 0x226 <main+0x1c>
 222:	18 9b       	sbis	0x03, 0	; 3
 224:	06 c0       	rjmp	.+12     	; 0x232 <main+0x28>
 226:	88 81       	ld	r24, Y
 228:	88 3c       	cpi	r24, 0xC8	; 200
 22a:	18 f4       	brcc	.+6      	; 0x232 <main+0x28>
			{
				OCR4A += PLUS_MOINS; //Augmente l'intensité de la DEL.
 22c:	88 81       	ld	r24, Y
 22e:	8c 5f       	subi	r24, 0xFC	; 252
 230:	88 83       	st	Y, r24
			}
			if ((CAPTEUR_PORTE() && !CAPTEUR_MOVE()) && (OCR4A > 0)) //Si la porte est fermée et qu'aucun mouvement n'est détecté et que la DEL n'est pas à son intensité minimale (0)...
 232:	1b 9b       	sbis	0x03, 3	; 3
 234:	08 c0       	rjmp	.+16     	; 0x246 <main+0x3c>
 236:	18 99       	sbic	0x03, 0	; 3
 238:	06 c0       	rjmp	.+12     	; 0x246 <main+0x3c>
 23a:	88 81       	ld	r24, Y
 23c:	88 23       	and	r24, r24
 23e:	19 f0       	breq	.+6      	; 0x246 <main+0x3c>
			{
				OCR4A -= PLUS_MOINS; //Diminue l'intensité de la DEL.
 240:	88 81       	ld	r24, Y
 242:	84 50       	subi	r24, 0x04	; 4
 244:	88 83       	st	Y, r24
			}
		}
		if ((!CAPTEUR_PORTE() || CAPTEUR_MOVE())) //Si la porte est ouverte ou qu'un mouvement est détecté...
 246:	1b 9b       	sbis	0x03, 3	; 3
 248:	02 c0       	rjmp	.+4      	; 0x24e <main+0x44>
 24a:	18 9b       	sbis	0x03, 0	; 3
 24c:	09 c0       	rjmp	.+18     	; 0x260 <main+0x56>
		{
			RELAY_SET(1); //Le relai est activé.
 24e:	29 9a       	sbi	0x05, 1	; 5
			porteToggle = 1; //Permet de savoir si la porte à déjà été ouverte depuis le démarage afin de ne pas tomber inutilement en mode veille.
 250:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <porteToggle>
			toggleCntSec = 0; //Remet le compteur à 0.
 254:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <toggleCntSec+0x1>
 258:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <toggleCntSec>
			toggleCntMin = 0; //Remet le compteur des minutes à 0 chaques fois que la porte est ouverte.
 25c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <toggleCntMin>
		}
		
		if ((CAPTEUR_PORTE() && !CAPTEUR_MOVE())) //Si la porte est fermée et qu'aucun mouvement n'est détecté...
 260:	1b 9b       	sbis	0x03, 3	; 3
 262:	d7 cf       	rjmp	.-82     	; 0x212 <main+0x8>
 264:	18 99       	sbic	0x03, 0	; 3
 266:	d5 cf       	rjmp	.-86     	; 0x212 <main+0x8>
		{
			if (toggleFlag) //Si le délai est écoulé...
 268:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <toggleFlag>
 26c:	88 23       	and	r24, r24
 26e:	89 f2       	breq	.-94     	; 0x212 <main+0x8>
			{
				toggleFlag = 0;
 270:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <toggleFlag>
				RELAY_SET(0); //Le relai n'est pas activé.
 274:	29 98       	cbi	0x05, 1	; 5
				if (porteToggle) //Si la porte à déjà été ouverte,
 276:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <porteToggle>
 27a:	88 23       	and	r24, r24
 27c:	51 f2       	breq	.-108    	; 0x212 <main+0x8>
				{
					porteToggle = 0; //État de la porte == fermée
 27e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <porteToggle>
					sleepModeON(); //Mode veille.
 282:	a6 df       	rcall	.-180    	; 0x1d0 <sleepModeON>
 284:	c6 cf       	rjmp	.-116    	; 0x212 <main+0x8>

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
